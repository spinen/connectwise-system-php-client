<?php
/**
 * AuditTrailEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\System
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * System API
 *
 * ConnectWise System API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\System\Model;

use \ArrayAccess;

/**
 * AuditTrailEntry Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\System
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AuditTrailEntry implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AuditTrailEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'text' => 'string',
        'entered_date' => 'string',
        'entered_by' => 'string',
        'audit_type' => 'string',
        'audit_sub_type' => 'string',
        'audit_source' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'entered_date' => 'enteredDate',
        'entered_by' => 'enteredBy',
        'audit_type' => 'auditType',
        'audit_sub_type' => 'auditSubType',
        'audit_source' => 'auditSource'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'entered_date' => 'setEnteredDate',
        'entered_by' => 'setEnteredBy',
        'audit_type' => 'setAuditType',
        'audit_sub_type' => 'setAuditSubType',
        'audit_source' => 'setAuditSource'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'entered_date' => 'getEnteredDate',
        'entered_by' => 'getEnteredBy',
        'audit_type' => 'getAuditType',
        'audit_sub_type' => 'getAuditSubType',
        'audit_source' => 'getAuditSource'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['entered_date'] = isset($data['entered_date']) ? $data['entered_date'] : null;
        $this->container['entered_by'] = isset($data['entered_by']) ? $data['entered_by'] : null;
        $this->container['audit_type'] = isset($data['audit_type']) ? $data['audit_type'] : null;
        $this->container['audit_sub_type'] = isset($data['audit_sub_type']) ? $data['audit_sub_type'] : null;
        $this->container['audit_source'] = isset($data['audit_source']) ? $data['audit_source'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets entered_date
     * @return string
     */
    public function getEnteredDate()
    {
        return $this->container['entered_date'];
    }

    /**
     * Sets entered_date
     * @param string $entered_date
     * @return $this
     */
    public function setEnteredDate($entered_date)
    {
        $this->container['entered_date'] = $entered_date;

        return $this;
    }

    /**
     * Gets entered_by
     * @return string
     */
    public function getEnteredBy()
    {
        return $this->container['entered_by'];
    }

    /**
     * Sets entered_by
     * @param string $entered_by
     * @return $this
     */
    public function setEnteredBy($entered_by)
    {
        $this->container['entered_by'] = $entered_by;

        return $this;
    }

    /**
     * Gets audit_type
     * @return string
     */
    public function getAuditType()
    {
        return $this->container['audit_type'];
    }

    /**
     * Sets audit_type
     * @param string $audit_type
     * @return $this
     */
    public function setAuditType($audit_type)
    {
        $this->container['audit_type'] = $audit_type;

        return $this;
    }

    /**
     * Gets audit_sub_type
     * @return string
     */
    public function getAuditSubType()
    {
        return $this->container['audit_sub_type'];
    }

    /**
     * Sets audit_sub_type
     * @param string $audit_sub_type
     * @return $this
     */
    public function setAuditSubType($audit_sub_type)
    {
        $this->container['audit_sub_type'] = $audit_sub_type;

        return $this;
    }

    /**
     * Gets audit_source
     * @return string
     */
    public function getAuditSource()
    {
        return $this->container['audit_source'];
    }

    /**
     * Sets audit_source
     * @param string $audit_source
     * @return $this
     */
    public function setAuditSource($audit_source)
    {
        $this->container['audit_source'] = $audit_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this));
    }
}


