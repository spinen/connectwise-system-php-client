<?php
/**
 * InOutBoard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\System
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * System API
 *
 * ConnectWise System API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\System\Model;

use \ArrayAccess;

/**
 * InOutBoard Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\System
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InOutBoard implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'InOutBoard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'member' => '\Spinen\ConnectWise\Clients\System\Model\MemberReference',
        'in_out_type' => '\Spinen\ConnectWise\Clients\System\Model\InOutTypeReference',
        'additional_info' => 'string',
        'date_back' => '\DateTime',
        '_info' => '\Spinen\ConnectWise\Clients\System\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'member' => 'member',
        'in_out_type' => 'inOutType',
        'additional_info' => 'additionalInfo',
        'date_back' => 'dateBack',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'member' => 'setMember',
        'in_out_type' => 'setInOutType',
        'additional_info' => 'setAdditionalInfo',
        'date_back' => 'setDateBack',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'member' => 'getMember',
        'in_out_type' => 'getInOutType',
        'additional_info' => 'getAdditionalInfo',
        'date_back' => 'getDateBack',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['in_out_type'] = isset($data['in_out_type']) ? $data['in_out_type'] : null;
        $this->container['additional_info'] = isset($data['additional_info']) ? $data['additional_info'] : null;
        $this->container['date_back'] = isset($data['date_back']) ? $data['date_back'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['member'] === null) {
            $invalid_properties[] = "'member' can't be null";
        }
        if ($this->container['in_out_type'] === null) {
            $invalid_properties[] = "'in_out_type' can't be null";
        }
        if (!is_null($this->container['additional_info']) && (strlen($this->container['additional_info']) > 100)) {
            $invalid_properties[] = "invalid value for 'additional_info', the character length must be smaller than or equal to 100.";
        }

        if ($this->container['date_back'] === null) {
            $invalid_properties[] = "'date_back' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['member'] === null) {
            return false;
        }
        if ($this->container['in_out_type'] === null) {
            return false;
        }
        if (strlen($this->container['additional_info']) > 100) {
            return false;
        }
        if ($this->container['date_back'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\System\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\System\Model\MemberReference $member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets in_out_type
     * @return \Spinen\ConnectWise\Clients\System\Model\InOutTypeReference
     */
    public function getInOutType()
    {
        return $this->container['in_out_type'];
    }

    /**
     * Sets in_out_type
     * @param \Spinen\ConnectWise\Clients\System\Model\InOutTypeReference $in_out_type
     * @return $this
     */
    public function setInOutType($in_out_type)
    {
        $this->container['in_out_type'] = $in_out_type;

        return $this;
    }

    /**
     * Gets additional_info
     * @return string
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     * @param string $additional_info
     * @return $this
     */
    public function setAdditionalInfo($additional_info)
    {
        if (!is_null($additional_info) && (strlen($additional_info) > 100)) {
            throw new \InvalidArgumentException('invalid length for $additional_info when calling InOutBoard., must be smaller than or equal to 100.');
        }

        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets date_back
     * @return \DateTime
     */
    public function getDateBack()
    {
        return $this->container['date_back'];
    }

    /**
     * Sets date_back
     * @param \DateTime $date_back
     * @return $this
     */
    public function setDateBack($date_back)
    {
        $this->container['date_back'] = $date_back;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\System\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\System\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this));
    }
}


