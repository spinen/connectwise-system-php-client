<?php
/**
 * DocumentInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\System
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * System API
 *
 * ConnectWise System API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\System\Spinen\ConnectWise\Clients\System\Model;

use \ArrayAccess;

/**
 * DocumentInfo Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\System
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DocumentInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'title' => 'string',
        'file_name' => 'string',
        'server_file_name' => 'string',
        'owner' => 'string',
        'link_flag' => 'bool',
        'image_flag' => 'bool',
        'public_flag' => 'bool',
        'read_only_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\System\Spinen\ConnectWise\Clients\System\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'title' => 'title',
        'file_name' => 'fileName',
        'server_file_name' => 'serverFileName',
        'owner' => 'owner',
        'link_flag' => 'linkFlag',
        'image_flag' => 'imageFlag',
        'public_flag' => 'publicFlag',
        'read_only_flag' => 'readOnlyFlag',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'title' => 'setTitle',
        'file_name' => 'setFileName',
        'server_file_name' => 'setServerFileName',
        'owner' => 'setOwner',
        'link_flag' => 'setLinkFlag',
        'image_flag' => 'setImageFlag',
        'public_flag' => 'setPublicFlag',
        'read_only_flag' => 'setReadOnlyFlag',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'title' => 'getTitle',
        'file_name' => 'getFileName',
        'server_file_name' => 'getServerFileName',
        'owner' => 'getOwner',
        'link_flag' => 'getLinkFlag',
        'image_flag' => 'getImageFlag',
        'public_flag' => 'getPublicFlag',
        'read_only_flag' => 'getReadOnlyFlag',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['server_file_name'] = isset($data['server_file_name']) ? $data['server_file_name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['link_flag'] = isset($data['link_flag']) ? $data['link_flag'] : null;
        $this->container['image_flag'] = isset($data['image_flag']) ? $data['image_flag'] : null;
        $this->container['public_flag'] = isset($data['public_flag']) ? $data['public_flag'] : null;
        $this->container['read_only_flag'] = isset($data['read_only_flag']) ? $data['read_only_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets file_name
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     * @param string $file_name
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets server_file_name
     * @return string
     */
    public function getServerFileName()
    {
        return $this->container['server_file_name'];
    }

    /**
     * Sets server_file_name
     * @param string $server_file_name
     * @return $this
     */
    public function setServerFileName($server_file_name)
    {
        $this->container['server_file_name'] = $server_file_name;

        return $this;
    }

    /**
     * Gets owner
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     * @param string $owner
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets link_flag
     * @return bool
     */
    public function getLinkFlag()
    {
        return $this->container['link_flag'];
    }

    /**
     * Sets link_flag
     * @param bool $link_flag
     * @return $this
     */
    public function setLinkFlag($link_flag)
    {
        $this->container['link_flag'] = $link_flag;

        return $this;
    }

    /**
     * Gets image_flag
     * @return bool
     */
    public function getImageFlag()
    {
        return $this->container['image_flag'];
    }

    /**
     * Sets image_flag
     * @param bool $image_flag
     * @return $this
     */
    public function setImageFlag($image_flag)
    {
        $this->container['image_flag'] = $image_flag;

        return $this;
    }

    /**
     * Gets public_flag
     * @return bool
     */
    public function getPublicFlag()
    {
        return $this->container['public_flag'];
    }

    /**
     * Sets public_flag
     * @param bool $public_flag
     * @return $this
     */
    public function setPublicFlag($public_flag)
    {
        $this->container['public_flag'] = $public_flag;

        return $this;
    }

    /**
     * Gets read_only_flag
     * @return bool
     */
    public function getReadOnlyFlag()
    {
        return $this->container['read_only_flag'];
    }

    /**
     * Sets read_only_flag
     * @param bool $read_only_flag
     * @return $this
     */
    public function setReadOnlyFlag($read_only_flag)
    {
        $this->container['read_only_flag'] = $read_only_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\System\Spinen\ConnectWise\Clients\System\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\System\Spinen\ConnectWise\Clients\System\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this));
    }
}


