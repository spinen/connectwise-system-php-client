<?php
/**
 * UserDefinedField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\System
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * System API
 *
 * ConnectWise System API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\System\Model;

use \ArrayAccess;

/**
 * UserDefinedField Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\System
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserDefinedField implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UserDefinedField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'pod_id' => 'int',
        'caption' => 'string',
        'sequence_number' => 'int',
        'help_text' => 'string',
        'field_type_identifier' => 'string',
        'number_decimals' => 'int',
        'entry_type_identifier' => 'string',
        'required_flag' => 'bool',
        'display_on_screen_flag' => 'bool',
        'read_only_flag' => 'bool',
        'list_view_flag' => 'bool',
        'button_url' => 'string',
        'options' => '\Spinen\ConnectWise\Clients\System\Model\UserDefinedFieldOption[]',
        'business_unit_ids' => 'int[]',
        'location_ids' => 'int[]',
        'add_all_business_units' => 'bool',
        'remove_all_business_units' => 'bool',
        'add_all_locations' => 'bool',
        'remove_all_locations' => 'bool',
        'date_created' => '\DateTime',
        '_info' => '\Spinen\ConnectWise\Clients\System\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pod_id' => 'podId',
        'caption' => 'caption',
        'sequence_number' => 'sequenceNumber',
        'help_text' => 'helpText',
        'field_type_identifier' => 'fieldTypeIdentifier',
        'number_decimals' => 'numberDecimals',
        'entry_type_identifier' => 'entryTypeIdentifier',
        'required_flag' => 'requiredFlag',
        'display_on_screen_flag' => 'displayOnScreenFlag',
        'read_only_flag' => 'readOnlyFlag',
        'list_view_flag' => 'listViewFlag',
        'button_url' => 'buttonUrl',
        'options' => 'options',
        'business_unit_ids' => 'businessUnitIds',
        'location_ids' => 'locationIds',
        'add_all_business_units' => 'addAllBusinessUnits',
        'remove_all_business_units' => 'removeAllBusinessUnits',
        'add_all_locations' => 'addAllLocations',
        'remove_all_locations' => 'removeAllLocations',
        'date_created' => 'dateCreated',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pod_id' => 'setPodId',
        'caption' => 'setCaption',
        'sequence_number' => 'setSequenceNumber',
        'help_text' => 'setHelpText',
        'field_type_identifier' => 'setFieldTypeIdentifier',
        'number_decimals' => 'setNumberDecimals',
        'entry_type_identifier' => 'setEntryTypeIdentifier',
        'required_flag' => 'setRequiredFlag',
        'display_on_screen_flag' => 'setDisplayOnScreenFlag',
        'read_only_flag' => 'setReadOnlyFlag',
        'list_view_flag' => 'setListViewFlag',
        'button_url' => 'setButtonUrl',
        'options' => 'setOptions',
        'business_unit_ids' => 'setBusinessUnitIds',
        'location_ids' => 'setLocationIds',
        'add_all_business_units' => 'setAddAllBusinessUnits',
        'remove_all_business_units' => 'setRemoveAllBusinessUnits',
        'add_all_locations' => 'setAddAllLocations',
        'remove_all_locations' => 'setRemoveAllLocations',
        'date_created' => 'setDateCreated',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pod_id' => 'getPodId',
        'caption' => 'getCaption',
        'sequence_number' => 'getSequenceNumber',
        'help_text' => 'getHelpText',
        'field_type_identifier' => 'getFieldTypeIdentifier',
        'number_decimals' => 'getNumberDecimals',
        'entry_type_identifier' => 'getEntryTypeIdentifier',
        'required_flag' => 'getRequiredFlag',
        'display_on_screen_flag' => 'getDisplayOnScreenFlag',
        'read_only_flag' => 'getReadOnlyFlag',
        'list_view_flag' => 'getListViewFlag',
        'button_url' => 'getButtonUrl',
        'options' => 'getOptions',
        'business_unit_ids' => 'getBusinessUnitIds',
        'location_ids' => 'getLocationIds',
        'add_all_business_units' => 'getAddAllBusinessUnits',
        'remove_all_business_units' => 'getRemoveAllBusinessUnits',
        'add_all_locations' => 'getAddAllLocations',
        'remove_all_locations' => 'getRemoveAllLocations',
        'date_created' => 'getDateCreated',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const FIELD_TYPE_IDENTIFIER_TEXT = 'Text';
    const FIELD_TYPE_IDENTIFIER_BUTTON = 'Button';
    const FIELD_TYPE_IDENTIFIER_DATE = 'Date';
    const FIELD_TYPE_IDENTIFIER_HYPERLINK = 'Hyperlink';
    const FIELD_TYPE_IDENTIFIER_CHECKBOX = 'Checkbox';
    const FIELD_TYPE_IDENTIFIER_NUMBER = 'Number';
    const FIELD_TYPE_IDENTIFIER_PERCENT = 'Percent';
    const FIELD_TYPE_IDENTIFIER_TEXT_AREA = 'TextArea';
    const ENTRY_TYPE_IDENTIFIER_ENTRY_FIELD = 'EntryField';
    const ENTRY_TYPE_IDENTIFIER__LIST = 'List';
    const ENTRY_TYPE_IDENTIFIER_OPTION = 'Option';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFieldTypeIdentifierAllowableValues()
    {
        return [
            self::FIELD_TYPE_IDENTIFIER_TEXT,
            self::FIELD_TYPE_IDENTIFIER_BUTTON,
            self::FIELD_TYPE_IDENTIFIER_DATE,
            self::FIELD_TYPE_IDENTIFIER_HYPERLINK,
            self::FIELD_TYPE_IDENTIFIER_CHECKBOX,
            self::FIELD_TYPE_IDENTIFIER_NUMBER,
            self::FIELD_TYPE_IDENTIFIER_PERCENT,
            self::FIELD_TYPE_IDENTIFIER_TEXT_AREA,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEntryTypeIdentifierAllowableValues()
    {
        return [
            self::ENTRY_TYPE_IDENTIFIER_ENTRY_FIELD,
            self::ENTRY_TYPE_IDENTIFIER__LIST,
            self::ENTRY_TYPE_IDENTIFIER_OPTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pod_id'] = isset($data['pod_id']) ? $data['pod_id'] : null;
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['help_text'] = isset($data['help_text']) ? $data['help_text'] : null;
        $this->container['field_type_identifier'] = isset($data['field_type_identifier']) ? $data['field_type_identifier'] : null;
        $this->container['number_decimals'] = isset($data['number_decimals']) ? $data['number_decimals'] : null;
        $this->container['entry_type_identifier'] = isset($data['entry_type_identifier']) ? $data['entry_type_identifier'] : null;
        $this->container['required_flag'] = isset($data['required_flag']) ? $data['required_flag'] : null;
        $this->container['display_on_screen_flag'] = isset($data['display_on_screen_flag']) ? $data['display_on_screen_flag'] : null;
        $this->container['read_only_flag'] = isset($data['read_only_flag']) ? $data['read_only_flag'] : null;
        $this->container['list_view_flag'] = isset($data['list_view_flag']) ? $data['list_view_flag'] : null;
        $this->container['button_url'] = isset($data['button_url']) ? $data['button_url'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['business_unit_ids'] = isset($data['business_unit_ids']) ? $data['business_unit_ids'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['add_all_business_units'] = isset($data['add_all_business_units']) ? $data['add_all_business_units'] : null;
        $this->container['remove_all_business_units'] = isset($data['remove_all_business_units']) ? $data['remove_all_business_units'] : null;
        $this->container['add_all_locations'] = isset($data['add_all_locations']) ? $data['add_all_locations'] : null;
        $this->container['remove_all_locations'] = isset($data['remove_all_locations']) ? $data['remove_all_locations'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['pod_id'] === null) {
            $invalid_properties[] = "'pod_id' can't be null";
        }
        if ($this->container['caption'] === null) {
            $invalid_properties[] = "'caption' can't be null";
        }
        if ((strlen($this->container['caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'caption', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['sequence_number'] === null) {
            $invalid_properties[] = "'sequence_number' can't be null";
        }
        if (($this->container['sequence_number'] > 50)) {
            $invalid_properties[] = "invalid value for 'sequence_number', must be smaller than or equal to 50.";
        }

        if (($this->container['sequence_number'] < 1)) {
            $invalid_properties[] = "invalid value for 'sequence_number', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['help_text']) && (strlen($this->container['help_text']) > 1000)) {
            $invalid_properties[] = "invalid value for 'help_text', the character length must be smaller than or equal to 1000.";
        }

        if ($this->container['field_type_identifier'] === null) {
            $invalid_properties[] = "'field_type_identifier' can't be null";
        }
        $allowed_values = ["Text", "Button", "Date", "Hyperlink", "Checkbox", "Number", "Percent", "TextArea"];
        if (!in_array($this->container['field_type_identifier'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'field_type_identifier', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['number_decimals']) && ($this->container['number_decimals'] > 5)) {
            $invalid_properties[] = "invalid value for 'number_decimals', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['number_decimals']) && ($this->container['number_decimals'] < 0)) {
            $invalid_properties[] = "invalid value for 'number_decimals', must be bigger than or equal to 0.";
        }

        $allowed_values = ["EntryField", "List", "Option"];
        if (!in_array($this->container['entry_type_identifier'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'entry_type_identifier', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['button_url']) && (strlen($this->container['button_url']) > 1000)) {
            $invalid_properties[] = "invalid value for 'button_url', the character length must be smaller than or equal to 1000.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['pod_id'] === null) {
            return false;
        }
        if ($this->container['caption'] === null) {
            return false;
        }
        if (strlen($this->container['caption']) > 25) {
            return false;
        }
        if ($this->container['sequence_number'] === null) {
            return false;
        }
        if ($this->container['sequence_number'] > 50) {
            return false;
        }
        if ($this->container['sequence_number'] < 1) {
            return false;
        }
        if (strlen($this->container['help_text']) > 1000) {
            return false;
        }
        if ($this->container['field_type_identifier'] === null) {
            return false;
        }
        $allowed_values = ["Text", "Button", "Date", "Hyperlink", "Checkbox", "Number", "Percent", "TextArea"];
        if (!in_array($this->container['field_type_identifier'], $allowed_values)) {
            return false;
        }
        if ($this->container['number_decimals'] > 5) {
            return false;
        }
        if ($this->container['number_decimals'] < 0) {
            return false;
        }
        $allowed_values = ["EntryField", "List", "Option"];
        if (!in_array($this->container['entry_type_identifier'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['button_url']) > 1000) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID of the custom user defined field
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pod_id
     * @return int
     */
    public function getPodId()
    {
        return $this->container['pod_id'];
    }

    /**
     * Sets pod_id
     * @param int $pod_id Id of the Pod where the custom field will be placed
     * @return $this
     */
    public function setPodId($pod_id)
    {
        $this->container['pod_id'] = $pod_id;

        return $this;
    }

    /**
     * Gets caption
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     * @param string $caption Field caption
     * @return $this
     */
    public function setCaption($caption)
    {
        if ((strlen($caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $caption when calling UserDefinedField., must be smaller than or equal to 25.');
        }

        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets sequence_number
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     * @param int $sequence_number Must be between 1 and 50.  This defines the order in which the custom fields will appear
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {

        if (($sequence_number > 50)) {
            throw new \InvalidArgumentException('invalid value for $sequence_number when calling UserDefinedField., must be smaller than or equal to 50.');
        }
        if (($sequence_number < 1)) {
            throw new \InvalidArgumentException('invalid value for $sequence_number when calling UserDefinedField., must be bigger than or equal to 1.');
        }

        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets help_text
     * @return string
     */
    public function getHelpText()
    {
        return $this->container['help_text'];
    }

    /**
     * Sets help_text
     * @param string $help_text Help text to accompany the custom field
     * @return $this
     */
    public function setHelpText($help_text)
    {
        if (!is_null($help_text) && (strlen($help_text) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $help_text when calling UserDefinedField., must be smaller than or equal to 1000.');
        }

        $this->container['help_text'] = $help_text;

        return $this;
    }

    /**
     * Gets field_type_identifier
     * @return string
     */
    public function getFieldTypeIdentifier()
    {
        return $this->container['field_type_identifier'];
    }

    /**
     * Sets field_type_identifier
     * @param string $field_type_identifier
     * @return $this
     */
    public function setFieldTypeIdentifier($field_type_identifier)
    {
        $allowed_values = array('Text', 'Button', 'Date', 'Hyperlink', 'Checkbox', 'Number', 'Percent', 'TextArea');
        if ((!in_array($field_type_identifier, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'field_type_identifier', must be one of 'Text', 'Button', 'Date', 'Hyperlink', 'Checkbox', 'Number', 'Percent', 'TextArea'");
        }
        $this->container['field_type_identifier'] = $field_type_identifier;

        return $this;
    }

    /**
     * Gets number_decimals
     * @return int
     */
    public function getNumberDecimals()
    {
        return $this->container['number_decimals'];
    }

    /**
     * Sets number_decimals
     * @param int $number_decimals Only valid for Number or percent
     * @return $this
     */
    public function setNumberDecimals($number_decimals)
    {

        if (!is_null($number_decimals) && ($number_decimals > 5)) {
            throw new \InvalidArgumentException('invalid value for $number_decimals when calling UserDefinedField., must be smaller than or equal to 5.');
        }
        if (!is_null($number_decimals) && ($number_decimals < 0)) {
            throw new \InvalidArgumentException('invalid value for $number_decimals when calling UserDefinedField., must be bigger than or equal to 0.');
        }

        $this->container['number_decimals'] = $number_decimals;

        return $this;
    }

    /**
     * Gets entry_type_identifier
     * @return string
     */
    public function getEntryTypeIdentifier()
    {
        return $this->container['entry_type_identifier'];
    }

    /**
     * Sets entry_type_identifier
     * @param string $entry_type_identifier
     * @return $this
     */
    public function setEntryTypeIdentifier($entry_type_identifier)
    {
        $allowed_values = array('EntryField', 'List', 'Option');
        if (!is_null($entry_type_identifier) && (!in_array($entry_type_identifier, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'entry_type_identifier', must be one of 'EntryField', 'List', 'Option'");
        }
        $this->container['entry_type_identifier'] = $entry_type_identifier;

        return $this;
    }

    /**
     * Gets required_flag
     * @return bool
     */
    public function getRequiredFlag()
    {
        return $this->container['required_flag'];
    }

    /**
     * Sets required_flag
     * @param bool $required_flag
     * @return $this
     */
    public function setRequiredFlag($required_flag)
    {
        $this->container['required_flag'] = $required_flag;

        return $this;
    }

    /**
     * Gets display_on_screen_flag
     * @return bool
     */
    public function getDisplayOnScreenFlag()
    {
        return $this->container['display_on_screen_flag'];
    }

    /**
     * Sets display_on_screen_flag
     * @param bool $display_on_screen_flag
     * @return $this
     */
    public function setDisplayOnScreenFlag($display_on_screen_flag)
    {
        $this->container['display_on_screen_flag'] = $display_on_screen_flag;

        return $this;
    }

    /**
     * Gets read_only_flag
     * @return bool
     */
    public function getReadOnlyFlag()
    {
        return $this->container['read_only_flag'];
    }

    /**
     * Sets read_only_flag
     * @param bool $read_only_flag
     * @return $this
     */
    public function setReadOnlyFlag($read_only_flag)
    {
        $this->container['read_only_flag'] = $read_only_flag;

        return $this;
    }

    /**
     * Gets list_view_flag
     * @return bool
     */
    public function getListViewFlag()
    {
        return $this->container['list_view_flag'];
    }

    /**
     * Sets list_view_flag
     * @param bool $list_view_flag Denotes that this custom field is included on a list view
     * @return $this
     */
    public function setListViewFlag($list_view_flag)
    {
        $this->container['list_view_flag'] = $list_view_flag;

        return $this;
    }

    /**
     * Gets button_url
     * @return string
     */
    public function getButtonUrl()
    {
        return $this->container['button_url'];
    }

    /**
     * Sets button_url
     * @param string $button_url Only available with Button Field Type. Required when entryTypeIdentifier is button
     * @return $this
     */
    public function setButtonUrl($button_url)
    {
        if (!is_null($button_url) && (strlen($button_url) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $button_url when calling UserDefinedField., must be smaller than or equal to 1000.');
        }

        $this->container['button_url'] = $button_url;

        return $this;
    }

    /**
     * Gets options
     * @return \Spinen\ConnectWise\Clients\System\Model\UserDefinedFieldOption[]
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     * @param \Spinen\ConnectWise\Clients\System\Model\UserDefinedFieldOption[] $options
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets business_unit_ids
     * @return int[]
     */
    public function getBusinessUnitIds()
    {
        return $this->container['business_unit_ids'];
    }

    /**
     * Sets business_unit_ids
     * @param int[] $business_unit_ids
     * @return $this
     */
    public function setBusinessUnitIds($business_unit_ids)
    {
        $this->container['business_unit_ids'] = $business_unit_ids;

        return $this;
    }

    /**
     * Gets location_ids
     * @return int[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     * @param int[] $location_ids
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets add_all_business_units
     * @return bool
     */
    public function getAddAllBusinessUnits()
    {
        return $this->container['add_all_business_units'];
    }

    /**
     * Sets add_all_business_units
     * @param bool $add_all_business_units
     * @return $this
     */
    public function setAddAllBusinessUnits($add_all_business_units)
    {
        $this->container['add_all_business_units'] = $add_all_business_units;

        return $this;
    }

    /**
     * Gets remove_all_business_units
     * @return bool
     */
    public function getRemoveAllBusinessUnits()
    {
        return $this->container['remove_all_business_units'];
    }

    /**
     * Sets remove_all_business_units
     * @param bool $remove_all_business_units
     * @return $this
     */
    public function setRemoveAllBusinessUnits($remove_all_business_units)
    {
        $this->container['remove_all_business_units'] = $remove_all_business_units;

        return $this;
    }

    /**
     * Gets add_all_locations
     * @return bool
     */
    public function getAddAllLocations()
    {
        return $this->container['add_all_locations'];
    }

    /**
     * Sets add_all_locations
     * @param bool $add_all_locations
     * @return $this
     */
    public function setAddAllLocations($add_all_locations)
    {
        $this->container['add_all_locations'] = $add_all_locations;

        return $this;
    }

    /**
     * Gets remove_all_locations
     * @return bool
     */
    public function getRemoveAllLocations()
    {
        return $this->container['remove_all_locations'];
    }

    /**
     * Sets remove_all_locations
     * @param bool $remove_all_locations
     * @return $this
     */
    public function setRemoveAllLocations($remove_all_locations)
    {
        $this->container['remove_all_locations'] = $remove_all_locations;

        return $this;
    }

    /**
     * Gets date_created
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     * @param \DateTime $date_created Date in UTC the custom field was created
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\System\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\System\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\System\ObjectSerializer::sanitizeForSerialization($this));
    }
}


